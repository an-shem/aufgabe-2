{"version":3,"sources":["js/customers.js","js/get-month-or-day-from-date.js","js/create-clients-list-by-birthday-month.js","js/create-clients-list-by-transfer-month.js","js/get-email-by-name.js","js/find-most-frequent-number.js","js/get-top-day-monthly-transfers.js","js/creat-clients-list-without-financial-data.js","js/equalize-monthly-payments.js","js/creat-clients-list-with-deficit-balances.js","index.js"],"names":["customers","exports","name","preName","birthDate","address","eMail","finances","accountBalance","latestTransfer","nextDebitDate","lastDebitDate","nextDebitSum","debitIntervall","getMonthOrDayFromDate","date","value","month","split","day","_getMonthOrDayFromDate","require","createClientListByBirthdayMonth","areeyCLients","reduce","arrey","client","clientBirthdayMonth","push","createClientListByTransferMonth","clientTransferMonth","getEmailByName","filter","findMostFrequentNumber","arr","frequencyMap","forEach","num","mostFrequent","maxFrequency","_findMostFrequentNumber","getTopDayMonthlyTransfers","arreyDates","creatClientsListWithoutFinancialData","newArr","map","newItem","_objectSpread","equalizeMonthlyPayments","newMontlyPayments","newArrayClientsWithChangedPaymentData","structuredClone","toFixed","_createClientsListByTransferMonth","creatClientsListWithDeficitBalances","arreyDate","nextMonth","concat","padStart","newDate","join","newDataClients","deficit","_customers","_createClientsListByBirthdayMonth","_getEmailByName","_getTopDayMonthlyTransfers","_creatClientsListWithoutFinancialData","_equalizeMonthlyPayments","_creatClientsListWithDeficitBalances","usedDate","newPrice","console","log"],"mappings":";AAuJC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,eAAA,EAvJM,IAAMA,EAASC,QAAAD,UAAG,CACvB,CACEE,KAAM,QACNC,QAAS,OACTC,UAAW,aACXC,QAAS,+BACTC,MAAO,qBACPC,SAAU,CACRC,eAAgB,IAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,GACdC,eAAgB,YAGpB,CACEX,KAAM,QACNC,QAAS,QACTC,UAAW,aACXC,QAAS,gCACTC,MAAO,sBACPC,SAAU,CACRC,eAAgB,EAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,GACdC,eAAgB,YAGpB,CACEX,KAAM,QACNC,QAAS,SACTC,UAAW,aACXC,QAAS,+BACTC,MAAO,uBACPC,SAAU,CACRC,eAAgB,GAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,GACdC,eAAgB,YAGpB,CACEX,KAAM,SACNC,QAAS,SACTC,UAAW,aACXC,QAAS,+BACTC,MAAO,wBACPC,SAAU,CACRC,eAAgB,IAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,IACdC,eAAgB,WAGpB,CACEX,KAAM,QACNC,QAAS,SACTC,UAAW,aACXC,QAAS,kCACTC,MAAO,uBACPC,SAAU,CACRC,eAAgB,EAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,IACdC,eAAgB,WAGpB,CACEX,KAAM,UACNC,QAAS,OACTC,UAAW,aACXC,QAAS,6BACTC,MAAO,uBACPC,SAAU,CACRC,eAAgB,KAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,MACdC,eAAgB,YAGpB,CACEX,KAAM,WACNC,QAAS,SACTC,UAAW,aACXC,QAAS,gCACTC,MAAO,0BACPC,SAAU,CACRC,eAAgB,GAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,MACdC,eAAgB,cAGpB,CACEX,KAAM,QACNC,QAAS,SACTC,UAAW,aACXC,QAAS,iCACTC,MAAO,uBACPC,SAAU,CACRC,eAAgB,GAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,GACdC,eAAgB,YAGpB,CACEX,KAAM,QACNC,QAAS,OACTC,UAAW,aACXC,QAAS,6BACTC,MAAO,qBACPC,SAAU,CACRC,eAAgB,IAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,MACdC,eAAgB,gBAGpB,CACEX,KAAM,QACNC,QAAS,SACTC,UAAW,aACXC,QAAS,8BACTC,MAAO,uBACPC,SAAU,CACRC,eAAgB,GAChBC,eAAgB,aAChBC,cAAe,aACfC,cAAe,aACfC,aAAc,GACdC,eAAgB;;AChJrB,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,2BAAA,EAJM,IAAMC,EAAqBb,QAAAa,sBAAG,SAACC,EAAMC,GAC1C,IAAMC,EAAQF,EAAKG,MAAM,QAAQ,GAC3BC,EAAMJ,EAAKG,MAAM,QAAQ,GAC/B,MAAiB,UAAVF,EAAoBC,EAAQE;;ACcpC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qCAAA,EAjBD,IAAAC,EAAAC,QAAA,gCAEaC,EAA+BrB,QAAAqB,gCAAG,SAACP,EAAMQ,GACpD,IAAMN,GAAQ,EAAAH,EAAqB,uBAACC,EAAM,SAa1C,OAX6BQ,EAAaC,OAAO,SAACC,EAAOC,GACvD,IAAMC,GAAsB,EAAAb,EAAqB,uBAC/CY,EAAOtB,UACP,SAKF,OAHIa,IAAUU,GACZF,EAAMG,KAAKF,GAEND,GACN;;ACEJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,qCAAA,EAhBD,IAAAL,EAAAC,QAAA,gCAEaQ,EAA+B5B,QAAA4B,gCAAG,SAACd,EAAMQ,GACpD,IAAMN,GAAQ,EAAAH,EAAqB,uBAACC,EAAM,SAY1C,OAX6BQ,EAAaC,OAAO,SAACC,EAAOC,GACvD,IAAMI,GAAsB,EAAAhB,EAAqB,uBAC/CY,EAAOnB,SAASG,cAChB,SAKF,OAHIO,IAAUa,GACZL,EAAMG,KAAKF,GAEND,GACN;;ACRJ,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,oBAAA,EALM,IAAMM,EAAc9B,QAAA8B,eAAG,SAAC7B,EAAMqB,GAInC,OAH6BA,EAAaS,OACxC,SAAAN,GAAM,OAAIxB,IAASwB,EAAOxB,OAEA,GAAGI;;ACajC,aAjBO,SAAS2B,EAAuBC,GACrC,IAAMC,EAAe,GAErBD,EAAIE,QAAQ,SAAAC,GACVF,EAAaE,IAAQF,EAAaE,IAAQ,GAAK,IAGjD,IAAIC,EAAe,KACfC,EAAe,EAEnB,IAAK,IAAMF,KAAOF,EACZA,EAAaE,GAAOE,IACtBA,EAAeJ,EAAaE,GAC5BC,EAAeD,GAGnB,OAAOC,EACT,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,uBAAA;;ACNC,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,+BAAA,EAXD,IAAAlB,EAAAC,QAAA,gCACAmB,EAAAnB,QAAA,+BAEaoB,EAAyBxC,QAAAwC,0BAAG,SAAAlB,GACvC,IAAMmB,EAAanB,EAAaC,OAAO,SAACU,EAAKR,GAI3C,MAHuC,YAAnCA,EAAOnB,SAASM,gBAClBqB,EAAIN,MAAK,EAAAd,EAAqB,uBAACY,EAAOnB,SAASG,cAAe,QAEzDwB,GACN,IACH,OAAO,EAAAD,EAAsB,wBAACS;;ACF/B,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,SAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,KAAA,GAAA,GAAA,OAAA,sBAAA,CAAA,IAAA,EAAA,OAAA,sBAAA,GAAA,IAAA,EAAA,EAAA,OAAA,SAAA,GAAA,OAAA,OAAA,yBAAA,EAAA,GAAA,cAAA,EAAA,KAAA,MAAA,EAAA,GAAA,OAAA,EAAA,SAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,UAAA,OAAA,IAAA,CAAA,IAAA,EAAA,MAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,EAAA,EAAA,OAAA,IAAA,GAAA,QAAA,SAAA,GAAA,EAAA,EAAA,EAAA,EAAA,MAAA,OAAA,0BAAA,OAAA,iBAAA,EAAA,OAAA,0BAAA,IAAA,EAAA,OAAA,IAAA,QAAA,SAAA,GAAA,OAAA,eAAA,EAAA,EAAA,OAAA,yBAAA,EAAA,MAAA,OAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,EAAA,EAAA,MAAA,EAAA,OAAA,eAAA,EAAA,EAAA,CAAA,MAAA,EAAA,YAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,GAAA,EAAA,EAAA,SAAA,EAAA,GAAA,IAAA,EAAA,EAAA,EAAA,UAAA,MAAA,UAAA,EAAA,GAAA,EAAA,EAAA,GAAA,SAAA,EAAA,EAAA,GAAA,GAAA,UAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,EAAA,OAAA,aAAA,QAAA,IAAA,EAAA,CAAA,IAAA,EAAA,EAAA,KAAA,EAAA,GAAA,WAAA,GAAA,UAAA,EAAA,GAAA,OAAA,EAAA,MAAA,IAAA,UAAA,gDAAA,OAAA,WAAA,EAAA,OAAA,QAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,0CAAA,EARM,IAAMC,EAAoC1C,QAAA0C,qCAAG,SAAApB,GAClD,IAAMqB,EAAS,GAMf,OALArB,EAAasB,IAAI,SAAAnB,GACf,IAAMoB,EAAOC,EAAQrB,GAAAA,UACdoB,EAAQvC,SACfqC,EAAOhB,KAAKkB,KAEPF;;ACkBR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,6BAAA,EAzBM,IAAMI,EAAuB/C,QAAA+C,wBAAG,SAACzB,EAAc0B,GACpD,IAAMC,EAAwC,GAuB9C,OAtBA3B,EAAasB,IAAI,SAAAnB,GACf,GAAuC,YAAnCA,EAAOnB,SAASM,eAA8B,CAChD,IAAMiC,EAAUK,gBAAgBzB,GAChCoB,EAAQvC,SAASK,cAAoC,EAApBqC,GAAuBG,QAAQ,GAChEF,EAAsCtB,KAAKkB,GAE7C,GAAuC,cAAnCpB,EAAOnB,SAASM,eAAgC,CAClD,IAAMiC,EAAUK,gBAAgBzB,GAChCoB,EAAQvC,SAASK,cAAoC,EAApBqC,GAAuBG,QAAQ,GAChEF,EAAsCtB,KAAKkB,GAE7C,GAAuC,gBAAnCpB,EAAOnB,SAASM,eAAkC,CACpD,IAAMiC,EAAUK,gBAAgBzB,GAChCoB,EAAQvC,SAASK,cAAoC,EAApBqC,GAAuBG,QAAQ,GAChEF,EAAsCtB,KAAKkB,GAE7C,GAAuC,WAAnCpB,EAAOnB,SAASM,eAA6B,CAC/C,IAAMiC,EAAUK,gBAAgBzB,GAChCoB,EAAQvC,SAASK,cAAoC,GAApBqC,GAAwBG,QAAQ,GACjEF,EAAsCtB,KAAKkB,MAGxCI;;ACOR,aAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,yCAAA,EA/BD,IAAAG,EAAAhC,QAAA,2CAEaiC,EAAmCrD,QAAAqD,oCAAG,SAACvC,EAAMQ,GACxD,IAAMgC,EAAYxC,EAAKG,MAAM,QACvBsC,EACsB,OAA1BzC,EAAKG,MAAM,QAAQ,GACf,KACA,GAAAuC,QAAI1C,EAAKG,MAAM,QAAQ,GAAK,GAAIwC,SAAS,EAAG,KAClDH,EAAU,GAAKC,EACf,IAAMG,EAAUJ,EAAUK,KAAK,KAqB/B,OApBmC,EAAA/B,EAA+B,iCAChE8B,EACApC,GAEkES,OAClE,SAAAN,GAAM,OAAIA,EAAOnB,SAASC,eAAiBkB,EAAOnB,SAASK,eAEUY,OACrE,SAACU,EAAKR,GACJ,IAAMmC,EAAiB,CACrB3D,KAAMwB,EAAOxB,KAAO,IAAMwB,EAAOvB,QACjCG,MAAOoB,EAAOpB,MACdD,QAASqB,EAAOrB,QAChByD,QAASpC,EAAOnB,SAASC,eAAiBkB,EAAOnB,SAASK,cAG5D,OADAsB,EAAIN,KAAKiC,GACF3B,GAET;;ACaH,aAzCD,IAAA6B,EAAA1C,QAAA,kBACA2C,EAAA3C,QAAA,8CACAgC,EAAAhC,QAAA,8CACA4C,EAAA5C,QAAA,0BACA6C,EAAA7C,QAAA,sCACA8C,EAAA9C,QAAA,kDACA+C,EAAA/C,QAAA,kCACAgD,EAAAhD,QAAA,iDAEMiD,EAAW,aACXC,EAAW,MAEjBC,QAAQC,IACN,mEACA,EAAAnD,EAA+B,iCAACgD,EAAUtE,EAAS,YAErDwE,QAAQC,IACN,8EACA,EAAA5C,EAA+B,iCAACyC,EAAUtE,EAAS,YAGrDwE,QAAQC,IACN,oEACA,EAAA1C,EAAc,gBAAC,QAAS/B,EAAS,YAEnCwE,QAAQC,IACN,4EACA,EAAAhC,EAAyB,2BAACzC,EAAS,YAErCwE,QAAQC,IACN,qDACA,EAAA9B,EAAoC,sCAAC3C,EAAS,YAEhDwE,QAAQC,IACN,kEACA,EAAAzB,EAAuB,yBAAChD,EAAS,UAAEuE,IAGrCC,QAAQC,IACN,8GACA,EAAAnB,EAAmC,qCAACgB,EAAUtE,EAAS","file":"src.88af24e2.js","sourceRoot":"..\\src","sourcesContent":["export const customers = [\r\n  {\r\n    name: 'Smith',\r\n    preName: 'John',\r\n    birthDate: '12-05-1975',\r\n    address: 'Hauptstraße 5, 12345 München',\r\n    eMail: 'john.smith@test.de',\r\n    finances: {\r\n      accountBalance: 150.0,\r\n      latestTransfer: '01-10-2023',\r\n      nextDebitDate: '15-11-2023',\r\n      lastDebitDate: '15-10-2023',\r\n      nextDebitSum: 15.0,\r\n      debitIntervall: 'monthly',\r\n    },\r\n  },\r\n  {\r\n    name: 'Jones',\r\n    preName: 'Henry',\r\n    birthDate: '23-12-1986',\r\n    address: 'Schulstraße 13, 23456 München',\r\n    eMail: 'henry.jones@test.de',\r\n    finances: {\r\n      accountBalance: 0.0,\r\n      latestTransfer: '02-10-2023',\r\n      nextDebitDate: '15-11-2023',\r\n      lastDebitDate: '15-10-2023',\r\n      nextDebitSum: 10.0,\r\n      debitIntervall: 'monthly',\r\n    },\r\n  },\r\n  {\r\n    name: 'Brown',\r\n    preName: 'George',\r\n    birthDate: '27-01-1978',\r\n    address: 'Gartebstraße 9, 34567 Berlin',\r\n    eMail: 'george.brown@test.de',\r\n    finances: {\r\n      accountBalance: 10.0,\r\n      latestTransfer: '30-09-2023',\r\n      nextDebitDate: '01-11-2023',\r\n      lastDebitDate: '01-10-2023',\r\n      nextDebitSum: 15.0,\r\n      debitIntervall: 'monthly',\r\n    },\r\n  },\r\n  {\r\n    name: 'Wilson',\r\n    preName: 'Oliver',\r\n    birthDate: '24-07-1997',\r\n    address: 'Dorfstraße 1, 45678 Hannover',\r\n    eMail: 'oliver.wilson@test.de',\r\n    finances: {\r\n      accountBalance: 120.0,\r\n      latestTransfer: '15-10-2023',\r\n      nextDebitDate: '01-11-2023',\r\n      lastDebitDate: '01-11-2022',\r\n      nextDebitSum: 120.0,\r\n      debitIntervall: 'annual',\r\n    },\r\n  },\r\n  {\r\n    name: 'Clark',\r\n    preName: 'Elijah',\r\n    birthDate: '18-09-1983',\r\n    address: 'Bahnhofstraße 44, 56789 München',\r\n    eMail: 'elijah.clark@test.de',\r\n    finances: {\r\n      accountBalance: 0.0,\r\n      latestTransfer: '01-11-2022',\r\n      nextDebitDate: '15-11-2023',\r\n      lastDebitDate: '15-11-2022',\r\n      nextDebitSum: 120.0,\r\n      debitIntervall: 'annual',\r\n    },\r\n  },\r\n  {\r\n    name: 'Roberts',\r\n    preName: 'Ella',\r\n    birthDate: '08-06-1994',\r\n    address: 'Birkenweg 12, 67891 Berlin',\r\n    eMail: 'ella.roberts@test.de',\r\n    finances: {\r\n      accountBalance: 1.05,\r\n      latestTransfer: '01-10-2023',\r\n      nextDebitDate: '15-11-2023',\r\n      lastDebitDate: '15-10-2023',\r\n      nextDebitSum: 19.95,\r\n      debitIntervall: 'monthly',\r\n    },\r\n  },\r\n  {\r\n    name: 'Williams',\r\n    preName: 'Evelyn',\r\n    birthDate: '09-08-1946',\r\n    address: 'Lindenstraße 23, 78912 Berlin',\r\n    eMail: 'evelyn.williams@test.de',\r\n    finances: {\r\n      accountBalance: 40.0,\r\n      latestTransfer: '22-10-2023',\r\n      nextDebitDate: '01-11-2023',\r\n      lastDebitDate: '01-08-2023',\r\n      nextDebitSum: 39.95,\r\n      debitIntervall: 'quarterly',\r\n    },\r\n  },\r\n  {\r\n    name: 'Allen',\r\n    preName: 'Olivia',\r\n    birthDate: '29-03-1992',\r\n    address: 'Kirchstraße 45, 89123 Hannover',\r\n    eMail: 'olivia.allen@test.de',\r\n    finances: {\r\n      accountBalance: 15.0,\r\n      latestTransfer: '29-10-2023',\r\n      nextDebitDate: '01-11-2023',\r\n      lastDebitDate: '01-10-2023',\r\n      nextDebitSum: 15.0,\r\n      debitIntervall: 'monthly',\r\n    },\r\n  },\r\n  {\r\n    name: 'Baker',\r\n    preName: 'Emma',\r\n    birthDate: '16-10-1966',\r\n    address: 'Waldstraße 4, 91234 Berlin',\r\n    eMail: 'emma.baker@test.de',\r\n    finances: {\r\n      accountBalance: 0.05,\r\n      latestTransfer: '23-05-2023',\r\n      nextDebitDate: '01-01-2024',\r\n      lastDebitDate: '01-06-2023',\r\n      nextDebitSum: 59.95,\r\n      debitIntervall: 'half-yearly',\r\n    },\r\n  },\r\n  {\r\n    name: 'Green',\r\n    preName: 'Sophia',\r\n    birthDate: '22-04-2001',\r\n    address: 'Amselweg 8, 112233 Hannover',\r\n    eMail: 'sophia.green@test.de',\r\n    finances: {\r\n      accountBalance: 15.0,\r\n      latestTransfer: '22-10-2023',\r\n      nextDebitDate: '15-11-2023',\r\n      lastDebitDate: '15-10-2023',\r\n      nextDebitSum: 15.0,\r\n      debitIntervall: 'monthly',\r\n    },\r\n  },\r\n];\r\n","export const getMonthOrDayFromDate = (date, value) => {\r\n  const month = date.split(/[.-]/)[1];\r\n  const day = date.split(/[.-]/)[0];\r\n  return value === 'month' ? month : day;\r\n};\r\n","import { getMonthOrDayFromDate } from './get-month-or-day-from-date';\r\n\r\nexport const createClientListByBirthdayMonth = (date, areeyCLients) => {\r\n  const month = getMonthOrDayFromDate(date, 'month');\r\n\r\n  const arreyFilteredClients = areeyCLients.reduce((arrey, client) => {\r\n    const clientBirthdayMonth = getMonthOrDayFromDate(\r\n      client.birthDate,\r\n      'month'\r\n    );\r\n    if (month === clientBirthdayMonth) {\r\n      arrey.push(client);\r\n    }\r\n    return arrey;\r\n  }, []);\r\n\r\n  return arreyFilteredClients;\r\n};\r\n","import { getMonthOrDayFromDate } from './get-month-or-day-from-date';\r\n\r\nexport const createClientListByTransferMonth = (date, areeyCLients) => {\r\n  const month = getMonthOrDayFromDate(date, 'month');\r\n  const arreyFilteredClients = areeyCLients.reduce((arrey, client) => {\r\n    const clientTransferMonth = getMonthOrDayFromDate(\r\n      client.finances.nextDebitDate,\r\n      'month'\r\n    );\r\n    if (month === clientTransferMonth) {\r\n      arrey.push(client);\r\n    }\r\n    return arrey;\r\n  }, []);\r\n\r\n  return arreyFilteredClients;\r\n};\r\n","export const getEmailByName = (name, areeyCLients) => {\r\n  const arreyFilteredClients = areeyCLients.filter(\r\n    client => name === client.name\r\n  );\r\n  return arreyFilteredClients[0].eMail;\r\n};\r\n","export function findMostFrequentNumber(arr) {\r\n  const frequencyMap = {}; // Объект для хранения частоты чисел\r\n  // Подсчитываем количество вхождений каждого числа в массив\r\n  arr.forEach(num => {\r\n    frequencyMap[num] = (frequencyMap[num] || 0) + 1;\r\n  });\r\n  // Находим число с максимальной частотой\r\n  let mostFrequent = null;\r\n  let maxFrequency = 0;\r\n\r\n  for (const num in frequencyMap) {\r\n    if (frequencyMap[num] > maxFrequency) {\r\n      maxFrequency = frequencyMap[num];\r\n      mostFrequent = num;\r\n    }\r\n  }\r\n  return mostFrequent;\r\n}\r\n","import { getMonthOrDayFromDate } from './get-month-or-day-from-date';\r\nimport { findMostFrequentNumber } from './find-most-frequent-number';\r\n\r\nexport const getTopDayMonthlyTransfers = areeyCLients => {\r\n  const arreyDates = areeyCLients.reduce((arr, client) => {\r\n    if (client.finances.debitIntervall === 'monthly') {\r\n      arr.push(getMonthOrDayFromDate(client.finances.nextDebitDate, 'day'));\r\n    }\r\n    return arr;\r\n  }, []);\r\n  return findMostFrequentNumber(arreyDates);\r\n};\r\n","export const creatClientsListWithoutFinancialData = areeyCLients => {\r\n  const newArr = [];\r\n  areeyCLients.map(client => {\r\n    const newItem = { ...client };\r\n    delete newItem.finances;\r\n    newArr.push(newItem);\r\n  });\r\n  return newArr;\r\n};\r\n","export const equalizeMonthlyPayments = (areeyCLients, newMontlyPayments) => {\r\n  const newArrayClientsWithChangedPaymentData = [];\r\n  areeyCLients.map(client => {\r\n    if (client.finances.debitIntervall === 'monthly') {\r\n      const newItem = structuredClone(client);\r\n      newItem.finances.nextDebitSum = (newMontlyPayments * 1).toFixed(2);\r\n      newArrayClientsWithChangedPaymentData.push(newItem);\r\n    }\r\n    if (client.finances.debitIntervall === 'quarterly') {\r\n      const newItem = structuredClone(client);\r\n      newItem.finances.nextDebitSum = (newMontlyPayments * 3).toFixed(2);\r\n      newArrayClientsWithChangedPaymentData.push(newItem);\r\n    }\r\n    if (client.finances.debitIntervall === 'half-yearly') {\r\n      const newItem = structuredClone(client);\r\n      newItem.finances.nextDebitSum = (newMontlyPayments * 6).toFixed(2);\r\n      newArrayClientsWithChangedPaymentData.push(newItem);\r\n    }\r\n    if (client.finances.debitIntervall === 'annual') {\r\n      const newItem = structuredClone(client);\r\n      newItem.finances.nextDebitSum = (newMontlyPayments * 12).toFixed(2);\r\n      newArrayClientsWithChangedPaymentData.push(newItem);\r\n    }\r\n  });\r\n  return newArrayClientsWithChangedPaymentData;\r\n};\r\n","import { createClientListByTransferMonth } from './create-clients-list-by-transfer-month';\r\n\r\nexport const creatClientsListWithDeficitBalances = (date, areeyCLients) => {\r\n  const arreyDate = date.split(/[.-]/);\r\n  const nextMonth =\r\n    date.split(/[.-]/)[1] === '12'\r\n      ? '01'\r\n      : `${+date.split(/[.-]/)[1] + 1}`.padStart(2, '0');\r\n  arreyDate[1] = nextMonth;\r\n  const newDate = arreyDate.join('-');\r\n  const arrayClientsToPayNextMonth = createClientListByTransferMonth(\r\n    newDate,\r\n    areeyCLients\r\n  );\r\n  const arrayCclientsWithDeficitBalances = arrayClientsToPayNextMonth.filter(\r\n    client => client.finances.accountBalance < client.finances.nextDebitSum\r\n  );\r\n  const dataClientsWithDeficitBalance = arrayCclientsWithDeficitBalances.reduce(\r\n    (arr, client) => {\r\n      const newDataClients = {\r\n        name: client.name + ' ' + client.preName,\r\n        eMail: client.eMail,\r\n        address: client.address,\r\n        deficit: client.finances.accountBalance - client.finances.nextDebitSum,\r\n      };\r\n      arr.push(newDataClients);\r\n      return arr;\r\n    },\r\n    []\r\n  );\r\n  return dataClientsWithDeficitBalance;\r\n};\r\n","import { customers } from './js/customers';\r\nimport { createClientListByBirthdayMonth } from './js/create-clients-list-by-birthday-month';\r\nimport { createClientListByTransferMonth } from './js/create-clients-list-by-transfer-month';\r\nimport { getEmailByName } from './js/get-email-by-name';\r\nimport { getTopDayMonthlyTransfers } from './js/get-top-day-monthly-transfers';\r\nimport { creatClientsListWithoutFinancialData } from './js/creat-clients-list-without-financial-data';\r\nimport { equalizeMonthlyPayments } from './js/equalize-monthly-payments';\r\nimport { creatClientsListWithDeficitBalances } from './js/creat-clients-list-with-deficit-balances';\r\n\r\nconst usedDate = '27.10.2023';\r\nconst newPrice = 19.95;\r\n\r\nconsole.log(\r\n  '1) List of clients whose birthday is in the specified month: >>',\r\n  createClientListByBirthdayMonth(usedDate, customers)\r\n);\r\nconsole.log(\r\n  '2) List of clients whose next transfer date is in the specified month: >> ',\r\n  createClientListByTransferMonth(usedDate, customers)\r\n);\r\n\r\nconsole.log(\r\n  '3) Email address for the client whose name has been entered: >> ',\r\n  getEmailByName('Baker', customers)\r\n);\r\nconsole.log(\r\n  '4) The most popular day of the month for monthly interval transfers: >> ',\r\n  getTopDayMonthlyTransfers(customers)\r\n);\r\nconsole.log(\r\n  '5) Client list without financial information: >> ',\r\n  creatClientsListWithoutFinancialData(customers)\r\n);\r\nconsole.log(\r\n  '6) Introduction of a new monthly tariff for all customers: >> ',\r\n  equalizeMonthlyPayments(customers, newPrice)\r\n);\r\n\r\nconsole.log(\r\n  '7) Creation of a list of clients who have insufficient funds on their account to pay the next payment: >> ',\r\n  creatClientsListWithDeficitBalances(usedDate, customers)\r\n);\r\n"]}